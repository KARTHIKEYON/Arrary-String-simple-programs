1.Given an array A of size N of integers. Your task is to find the minimum and maximum elements in the array.

Note: Return an array that contains 2 elements the first one will be a minimum element and the second will be a maximum of an array.

class Solution 
{
    static Pair getMinMax(long a[], long n)  
    {
        Arrays.sort(a);
        return new Pair (a[0],a[(int)n-1]);
    }
}

output:
Input:
N = 6
A[] = {3, 2, 1, 56, 10000, 167}
Output: 1 10000
-------------------------------------------------------------------------------------------------------------
2.Given an array of distinct elements. Find the third largest element in it.

Suppose you have A[] = {1, 2, 3, 4, 5, 6, 7}, its output will be 5 because it is the 3 largest element in the array A.

class Solution
{
    int thirdLargest(int a[], int n)
    {
	   Arrays.sort(a);
	   int third=n-3;
	   if(n>=3){
	       return a[third];
	   }
	   return -1;
    }
--------------------------------------------------------------------------------------------------------------
3.Given an array, arr of n integers, and an integer element x, find whether element x is present in the array. 
Return the index of the first occurrence of x in the array, or -1 if it doesn't exist.

class Solution {

    static int search(int arr[], int n, int x) {

        for(int i=0;i<n;i++){
            if(arr[i]==x){
                return i;
            }
        }
        return -1;
    }
}

output:
Input: n = 4, arr[] = {1,2,3,4}, x = 3
Output: 2
----------------------------------------------------------------------------------------------------------------
4.Given an array of size n-1 such that it only contains distinct integers in the range of 1 to n. Return the missing element.

class Solution {

    // Note that the size of the array is n-1
    int missingNumber(int n, int arr[]) {
        int sum=n*(n+1)/2;
        for(int i:arr)sum-=i;
        return sum;

        // Your Code Here
    }
}

output:
Input: n = 5, arr[] = {1,2,3,5}
Output: 4
-------------------------------------------------------------------------------------------------------------------
5.Given two arrays A and B of equal size N, the task is to find if given arrays are equal or not. Two arrays are said to be equal if both of them contain same set of elements,
arrangements (or permutation) of elements may be different though.
Note : If there are repetitions, then counts of repeated elements must also be same for two array to be equal.

class Solution{
    //Function to check if two arrays are equal or not.
    public static boolean check(long A[],long B[],int N)
    {
    
    Arrays.sort(A);
    Arrays.sort(B);
    return Arrays.equals(A, B);

        }

}

output=
N = 5
A[] = {1,2,5,4,0}
B[] = {2,4,5,0,1}
Output: 1
Explanation: Both the array can be 
rearranged to {0,1,2,4,5}
---------------------------------------------------------------------------------------------------------------------
6.Given an array, arr of n integers, and an integer element x, find whether element x is present in the array. 
Return the index of the first occurrence of x in the array, or -1 if it doesn't exist.

class Solution {

    static int search(int arr[], int n, int x) {

        for(int i=0;i<n;i++){
            if(arr[i]==x){
                return i ;
            }
        }return -1;
    }
}

output:
Input: n = 4, arr[] = {1,2,3,4}, x = 3
Output: 2
Explanation: There is one test case with array as {1, 2, 3 4} and element to be searched as 3. Since 3 is present at index 2,
the output is 2.
------------------------------------------------------------------------------------------------------------------------
7.Given an array Arr of N positive integers and another number X. 
Determine whether or not there exist two elements in Arr whose sum is exactly X.


class Solution {
    boolean hasArrayTwoCandidates(int arr[], int n, int x) {
        for(int i=0;i<n;i++){
            for(int j=1;j<n;j++){
                if(arr[i]+arr[j]==x){
                    return true;
                }
               
            }
           
        }
        return false;
        
    }
}

output:
Input:
N = 6, X = 16
Arr[] = {1, 4, 45, 6, 10, 8}
Output: Yes
Explanation: Arr[3] + Arr[4] = 6 + 10 = 16








