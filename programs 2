8.You are given a 3-digit number n, Find whether it is an Armstrong number or not.

An Armstrong number of three digits is a number such that the sum of the cubes of its digits is equal to the number itself. 371 is an Armstrong number since 33 + 73 + 13 = 371. 

Note: Return "true" if it is an Armstrong number else return "false".

class Solution {
    static String armstrongNumber(int n) {
        int sum=0,r;
        int amg=n;
        while(n!=0){
            r=n%10;
            sum =sum+r*r*r;
            n=n/10;
        }
        if(sum==amg){
            return "true";
        }
        else{
            return "false";
        }
    }
}

output:
Input: n = 153
Output: true
Explanation: 153 is an Armstrong number since 13 + 53 + 33 = 153. Hence answer is "true".
------------------------------------------------------------------------------------------------------------
9.Given an integer, check whether it is a palindrome or not.

class Solution
{
    public String is_palindrome(int n)
    {
     int sum=0;
     int n1=n;
     while(n1!=0)
     {
         sum=sum*10+n1%10;
         n1=n/10;
     }
     if(sum==n)
         return "Yes";
     else
         return "No";
     
    }
}

output :
Input: n = 555
Output: Yes
------------------------------------------------------------------------------------------------------------
10.Given an integer x, find the square root of x. If x is not a perfect square, then return floor(âˆšx).

class Solution
{
     long floorSqrt(long x)
	 {
		long s=(long)Math.sqrt(x);
		return s;
		
	 }
}

x = 5
Output: 2
Explanation: Since, 5 is not a perfect 
square, floor of square_root of 5 is 2.
-------------------------------------------------------------------------------------------------------------
11.Given a number N, check if a number is perfect or not. A number is said to be perfect if sum of all its factors excluding the number itself is equal to the number. 
Return 1 if the number is Perfect otherwise return 0.

public class PerfectNumber {
    public static void main(String[] args) {
        int num = 6; // Example number
        int sum = 0;
        int i = 1;

        while (i <= num) {
            if (num % i == 0) {
                sum += i;
            }
            i++;
        }

        if (sum == num) {
            System.out.println(num + " is a perfect number");
        } else {
            System.out.println(num + " is not a perfect number");
        }
    }
}

output ;
6 is a perfect palindrome



